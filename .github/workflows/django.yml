name: Django CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: todo
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint code
        run: |
          cd todoapp
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run migrations
        run: |
          cd todoapp
          python manage.py migrate --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

      - name: Run tests
        run: |
          cd todoapp
          python manage.py test --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

      - name: Check security issues
        run: |
          cd todoapp
          python manage.py check --deploy --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest .

      - name: Test Docker image
        run: |
          docker run --rm -e SECRET_KEY=${{ secrets.SECRET_KEY }} -e DJANGO_ENV=test -e DEBUG=False ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest python manage.py check

      - name: Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest

            # Stop and force remove old container
            sudo docker stop todo-app || true
            sudo docker rm -f todo-app || true

            # Pull latest image
            sudo docker pull $IMAGE

            # Create necessary directories with proper permissions
            sudo mkdir -p /home/ubuntu/sqlite_data
            sudo mkdir -p /home/ubuntu/staticfiles
            sudo mkdir -p /home/ubuntu/media
            sudo chown -R ubuntu:ubuntu /home/ubuntu/sqlite_data /home/ubuntu/staticfiles /home/ubuntu/media

            # Run migrations and collect static files
            sudo docker run --rm \
              --env-file /home/ubuntu/.env \
              -v /home/ubuntu/staticfiles:/app/todoapp/staticfiles \
              -v /home/ubuntu/media:/app/todoapp/media \
              $IMAGE /bin/sh -c "python manage.py migrate --settings=config.django.production && python manage.py collectstatic --noinput --settings=config.django.production"

            # Start new container with static and media mounts
            sudo docker run -d --name todo-app \
              -p 80:8000 \
              --env-file /home/ubuntu/.env \
              -v /home/ubuntu/staticfiles:/app/todoapp/staticfiles \
              -v /home/ubuntu/media:/app/todoapp/media \
              -e DJANGO_SETTINGS_MODULE=config.django.production \
              $IMAGE gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3
