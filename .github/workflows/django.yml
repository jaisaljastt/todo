name: Django CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: todo
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint code
        run: |
          cd todoapp
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run migrations
        run: |
          cd todoapp
          python manage.py migrate --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

      - name: Run tests
        run: |
          cd todoapp
          python manage.py test --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

      - name: Check security issues
        run: |
          cd todoapp
          python manage.py check --deploy --settings=config.django.test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_ENV: test
          DEBUG: "False"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest .

      - name: Test Docker image
        run: |
          docker run --rm -e SECRET_KEY=${{ secrets.SECRET_KEY }} -e DJANGO_ENV=test -e DEBUG=False ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest python manage.py check

      - name: Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/todo-app:latest
      
            # Stop any process using port 8000
            sudo lsof -t -i:8000 | xargs -r sudo kill -9 || true
            
            # Stop and remove old container
            sudo docker stop todo-app || true
            sudo docker rm todo-app || true
      
            # Pull latest image
            sudo docker pull $IMAGE
            
            # Run migrations first
            sudo docker run --rm --env-file /home/ubuntu/.env $IMAGE python manage.py migrate
            
            # Then create superuser
            sudo docker run --rm --env-file /home/ubuntu/.env $IMAGE python manage.py shell -c "import os; from django.contrib.auth import get_user_model; User=get_user_model(); username=os.environ['DJANGO_SUPERUSER_USERNAME']; email=os.environ['DJANGO_SUPERUSER_EMAIL']; password=os.environ['DJANGO_SUPERUSER_PASSWORD']; User.objects.filter(username=username).exists() or User.objects.create_superuser(username, email, password)"
      
            # Start new container
            sudo docker run -d \
              --name todo-app \
              --restart unless-stopped \
              -p 8000:8000 \
              --env-file /home/ubuntu/.env \
              $IMAGE
            
            # Verify container is running
            sudo docker ps | grep todo-app || (echo "Container failed to start" && exit 1)
